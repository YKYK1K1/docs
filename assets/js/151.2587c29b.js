(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{906:function(t,s,r){"use strict";r.r(s);var v=r(67),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"springcloud-config-分布式配置中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-config-分布式配置中心"}},[t._v("#")]),t._v(" "),r("strong",[t._v("SpringCloud config 分布式配置中心")])]),t._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" "),r("strong",[t._v("概述")])]),t._v(" "),r("hr"),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("分布式系统面临的配置问题")]),t._v(" "),r("p",[t._v("    微服务意味着要将单体应用中的业务拆分成一个个子服务,每个服务的粒度相对较小,因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行,所以一套集中式的、动态的配置管理设施是必不可少的。")]),t._v(" "),r("p",[t._v("SpringCloud提供了"),r("code",[t._v("ConfigServer")]),t._v("来解决这个问题,我们每一个微服务自己带着一个"),r("code",[t._v("application.yml")]),t._v(",上百个配置文件的管理")])]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/assets/spring-cloud-2/K-module/yky-20210218150815.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" "),r("strong",[t._v("是什么?")])]),t._v(" "),r("p",[t._v("SpringCloud Config 为微服务架构中的微服务提供集中化的外部配置支持,配置服务器为"),r("font",{attrs:{color:"#FF0000"}},[t._v("各个不同微服务应用")]),t._v("的所有环境提供了一个"),r("font",{attrs:{color:"#FF0000"}},[t._v("中心化的外部配置")]),t._v("。")],1),t._v(" "),r("h3",{attrs:{id:"怎么玩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#怎么玩"}},[t._v("#")]),t._v(" "),r("strong",[t._v("怎么玩?")])]),t._v(" "),r("p",[t._v("SpringCloud Config 分为"),r("font",{attrs:{color:"#FF0000"}},[t._v("服务端和客户端两部分")]),t._v("。")],1),t._v(" "),r("br"),t._v(" "),r("p",[t._v("服务端也称为"),r("font",{attrs:{color:"#FF0000"}},[t._v("分布式配置中心,它是一个独立的微服务应用")]),t._v(",用来连接配置服务器并为客户端提供获取配置信息,加密/解密信息等访问接口")],1),t._v(" "),r("br"),t._v(" "),r("p",[t._v("客户端则是通过指定的配置中心来管理应用资源,以及与业务相关的配置内容,并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息,这样就有助于对环境配置进行版本管理,并且可以通过git客户端工具来方便的管理和访问配置内容")]),t._v(" "),r("h3",{attrs:{id:"能干嘛"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#能干嘛"}},[t._v("#")]),t._v(" "),r("strong",[t._v("能干嘛?")])]),t._v(" "),r("ol",[r("li",[t._v("集中管理配置文件")]),t._v(" "),r("li",[t._v("不同环境不同配置，动态化的配置更新，分环境部署比如 dev【开发环境】/ test【测试环境】/ prod【产品环境】/ beta【预发布环境】/ release【发布环境】")]),t._v(" "),r("li",[t._v("运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息")]),t._v(" "),r("li",[t._v("当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置")]),t._v(" "),r("li",[t._v("将配置信息以REST接口的形式暴露 -> post、curl访问刷新均可....")])]),t._v(" "),r("h3",{attrs:{id:"与github整合配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#与github整合配置"}},[t._v("#")]),t._v(" "),r("strong",[t._v("与Github整合配置")])]),t._v(" "),r("p",[t._v("由于SpringCloud Config默认使用 Git 来存储配置文件（也有其它方式，比如支持 svn 和本地文件，但最推荐的还是 Git，而且使用的是"),r("code",[t._v("http/https")]),t._v("访问的形式）")]),t._v(" "),r("h3",{attrs:{id:"官网"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#官网"}},[t._v("#")]),t._v(" "),r("strong",[t._v("官网")])]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/assets/spring-cloud-2/K-module/yky-20210218154630.png",alt:""}})]),t._v(" "),r("p",[r("code",[t._v("https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/")])])])}),[],!1,null,null,null);s.default=a.exports}}]);