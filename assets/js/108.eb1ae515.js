(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{863:function(e,o,n){"use strict";n.r(o);var t=n(67),i=Object(t.a)({},(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"浏览器端存储技术简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端存储技术简介"}},[e._v("#")]),e._v(" 浏览器端存储技术简介")]),e._v(" "),n("h2",{attrs:{id:"cookie"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Cookie")])]),e._v(" "),n("p",[e._v("Cookie 是指存储在用户本地终端上的数据，同时它是与具体的 Web 页面或者站点相关的。Cookie 数据会自动在 Web 浏览器和 Web 服务器之间传输，也就是说 HTTP 请求发送时，会把保存在该请求域名下的所有 Cookie 值发送给 Web 服务器，因此服务器端脚本是可以读、写存储在客户端的 Cookie 的操作。")]),e._v(" "),n("h2",{attrs:{id:"localstorage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" "),n("strong",[e._v("LocalStorage")])]),e._v(" "),n("p",[e._v("在 HTML5 中，新加入了一个 localStorage 特性，这个特性主要是用来作为本地存储来使用的，解决了 Cookie 存储空间不足的问题(Cookie 中每条 Cookie 的存储空间为 4k)，localStorage 中一般浏览器支持的是 5M 大小，这个在不同的浏览器中 localStorage 会有所不同。")]),e._v(" "),n("h2",{attrs:{id:"sessionstorage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[e._v("#")]),e._v(" "),n("strong",[e._v("SessionStorage")])]),e._v(" "),n("p",[e._v("SessionStorage 与 LocalStorage 的唯一一点区别就是 LocalStorage 属于永久性存储，而 SessionStorage 属于当会话结束的时候，SessionStorage 中的键值对就会被清空。")]),e._v(" "),n("h2",{attrs:{id:"userdata、globalstorage、google-gear"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#userdata、globalstorage、google-gear"}},[e._v("#")]),e._v(" "),n("strong",[e._v("UserData、GlobalStorage、Google Gear")])]),e._v(" "),n("p",[e._v("这三种的使用都有一定的局限性，例如")]),e._v(" "),n("ul",[n("li",[e._v("userData 是 IE 浏览器专属，它的容量可以达到 640K，这种方案可靠，不需要安装额外插件，只不过它仅在IE下有效")]),e._v(" "),n("li",[e._v("globalStorage 适用于 Firefox 2+ 的浏览器，类似于 IE 的 userData")]),e._v(" "),n("li",[e._v("google gear 是谷歌开发出的一种本地存储技术，需要安装 Gear 组件")])]),e._v(" "),n("h2",{attrs:{id:"flash-shareobject（flash-cookie）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flash-shareobject（flash-cookie）"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Flash ShareObject（Flash Cookie）")])]),e._v(" "),n("p",[e._v("这种方式能能解决上面提到的 Cookie 存储的两个弊端，而且能够跨浏览器，应该说是目前最好的本地存储方案。不过，需要在页面中插入一个 Flash，当浏览器没有安装 Flash 控件时就不能用了。所幸的是，没有安装 Flash 的用户极少。")]),e._v(" "),n("h2",{attrs:{id:"附：cookieutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#附：cookieutils"}},[e._v("#")]),e._v(" "),n("strong",[e._v("附：CookieUtils")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.yky.leeshop.commons.utils;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\n\n/**\n * Cookie 工具类\n * <p>Title: CookieUtils</p>\n * <p>Description: </p>\n *\n * @author Lusifer\n * @version 1.0.0\n * @date 2017/12/10 22:00\n */\npublic final class CookieUtils {\n\n    /**\n     * 得到Cookie的值, 不编码\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName) {\n        return getCookieValue(request, cookieName, false);\n    }\n\n    /**\n     * 得到Cookie的值,\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) {\n        Cookie[] cookieList = request.getCookies();\n        if (cookieList == null || cookieName == null) {\n            return null;\n        }\n        String retValue = null;\n        try {\n            for (int i = 0; i < cookieList.length; i++) {\n                if (cookieList[i].getName().equals(cookieName)) {\n                    if (isDecoder) {\n                        retValue = URLDecoder.decode(cookieList[i].getValue(), "UTF-8");\n                    } else {\n                        retValue = cookieList[i].getValue();\n                    }\n                    break;\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return retValue;\n    }\n\n    /**\n     * 得到Cookie的值,\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) {\n        Cookie[] cookieList = request.getCookies();\n        if (cookieList == null || cookieName == null) {\n            return null;\n        }\n        String retValue = null;\n        try {\n            for (int i = 0; i < cookieList.length; i++) {\n                if (cookieList[i].getName().equals(cookieName)) {\n                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);\n                    break;\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return retValue;\n    }\n\n    /**\n     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue) {\n        setCookie(request, response, cookieName, cookieValue, -1);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效,但不编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage) {\n        setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);\n    }\n\n    /**\n     * 设置Cookie的值 不设置生效时间,但编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, boolean isEncode) {\n        setCookie(request, response, cookieName, cookieValue, -1, isEncode);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效, 编码参数\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage, boolean isEncode) {\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage, String encodeString) {\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);\n    }\n\n    /**\n     * 删除Cookie带cookie域名\n     */\n    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,\n                                    String cookieName) {\n        doSetCookie(request, response, cookieName, "", -1, false);\n    }\n\n    /**\n     * 设置Cookie的值，并使其在指定时间内生效\n     *\n     * @param cookieMaxage cookie生效的最大秒数\n     */\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,\n                                          String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) {\n        try {\n            if (cookieValue == null) {\n                cookieValue = "";\n            } else if (isEncode) {\n                cookieValue = URLEncoder.encode(cookieValue, "utf-8");\n            }\n            Cookie cookie = new Cookie(cookieName, cookieValue);\n            if (cookieMaxage > 0)\n                cookie.setMaxAge(cookieMaxage);\n            if (null != request) {// 设置域名的cookie\n                String domainName = getDomainName(request);\n//                System.out.println(domainName);\n                if (!"localhost".equals(domainName)) {\n                    cookie.setDomain(domainName);\n                }\n            }\n            cookie.setPath("/");\n            response.addCookie(cookie);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 设置Cookie的值，并使其在指定时间内生效\n     *\n     * @param cookieMaxage cookie生效的最大秒数\n     */\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,\n                                          String cookieName, String cookieValue, int cookieMaxage, String encodeString) {\n        try {\n            if (cookieValue == null) {\n                cookieValue = "";\n            } else {\n                cookieValue = URLEncoder.encode(cookieValue, encodeString);\n            }\n            Cookie cookie = new Cookie(cookieName, cookieValue);\n            if (cookieMaxage > 0)\n                cookie.setMaxAge(cookieMaxage);\n            if (null != request) {// 设置域名的cookie\n                String domainName = getDomainName(request);\n//                System.out.println(domainName);\n                if (!"localhost".equals(domainName)) {\n                    cookie.setDomain(domainName);\n                }\n            }\n            cookie.setPath("/");\n            response.addCookie(cookie);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 得到cookie的域名\n     */\n    private static final String getDomainName(HttpServletRequest request) {\n        String domainName = null;\n\n        String serverName = request.getRequestURL().toString();\n        if (serverName == null || serverName.equals("")) {\n            domainName = "";\n        } else {\n            serverName = serverName.toLowerCase();\n            serverName = serverName.substring(7);\n            final int end = serverName.indexOf("/");\n            serverName = serverName.substring(0, end);\n            final String[] domains = serverName.split("\\\\.");\n            int len = domains.length;\n            if (len > 3) {\n                // www.xxx.com.cn\n                domainName = "." + domains[len - 3] + "." + domains[len - 2] + "." + domains[len - 1];\n            } else if (len <= 3 && len > 1) {\n                // xxx.com or xxx.cn\n                domainName = "." + domains[len - 2] + "." + domains[len - 1];\n            } else {\n                domainName = serverName;\n            }\n        }\n\n        if (domainName != null && domainName.indexOf(":") > 0) {\n            String[] ary = domainName.split("\\\\:");\n            domainName = ary[0];\n        }\n        return domainName;\n    }\n\n}\n')])])])])}),[],!1,null,null,null);o.default=i.exports}}]);