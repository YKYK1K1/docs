(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{849:function(t,e,s){"use strict";s.r(e);var a=s(67),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"快速上手-webclient"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速上手-webclient"}},[t._v("#")]),t._v(" "),s("strong",[t._v("快速上手 WebClient")])]),t._v(" "),s("h2",{attrs:{id:"添加-pom-xml-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加-pom-xml-文件"}},[t._v("#")]),t._v(" "),s("strong",[t._v("添加 "),s("code",[t._v("Pom.xml")]),t._v(" 文件")])]),t._v(" "),s("hr"),t._v(" "),s("blockquote",[s("p",[t._v("WebClient 是一个非阻塞、响应式的HTTP客户端，它以响应式被压流的方式执行HTTP请求；WebClient默认使用 Reactor Netty 作为HTTP连接器，当然也可以通过ClientHttpConnector修改其它的HTTP连接器。")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("使用WebClient需要进入Spring5的相关依赖，如果使用的是SpringBoot项目的话直接引入下面的依赖就可以啦")])])]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-webflux"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"创建-webclient-实例的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-webclient-实例的方式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("创建 WebClient 实例的方式")])]),t._v(" "),s("hr"),t._v(" "),s("blockquote",[s("p",[t._v("技巧01：从 WebClient 的源码中可以看出，WebClient 接口提供了三个静态方法来创建 WebClient 实例")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20200620170408.png",alt:"WebClient 实例"}})]),t._v(" "),s("h3",{attrs:{id:"利用-create-创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用-create-创建"}},[t._v("#")]),t._v(" "),s("strong",[t._v("利用 "),s("code",[t._v("create()")]),t._v(" 创建")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("该方法不接受任何参数，返回类型是 WebClient\n")])])]),s("blockquote",[s("p",[t._v("技巧01：由于利用 "),s("code",[t._v("create()")]),t._v(" 创建的 WebClient 对象没有设定 baseURL，所以  "),s("code",[t._v('uri("http://127.0.0.1:8080/get/get01")')]),t._v(" 返回的结果就是最终需要请求的远程服务器的URL；这里的 "),s("code",[t._v('uri("http://127.0.0.1:8080/get/get01")')]),t._v("相当于重写 baseURL。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20200820195815994.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"利用-create-string-baseurl-创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用-create-string-baseurl-创建"}},[t._v("#")]),t._v(" "),s("strong",[t._v("利用 "),s("code",[t._v("create(String baseUrl)")]),t._v(" 创建")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("该方法接收一个 String 类型的对象作为 baseUrl，直接返回 WebClient 对象\n")])])]),s("blockquote",[s("p",[t._v("技巧01：由于利用 "),s("code",[t._v("create(String baseUrl)")]),t._v(" 创建的 WebClient 对象时已经设定了 baseURL，所以 "),s("code",[t._v('uri("/get01")')]),t._v(" 会将返回的结果和 baseUrl 进行拼接组成最终需要远程请求的资源 URL")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820203359683.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"利用-builder-创建【推荐使用】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用-builder-创建【推荐使用】"}},[t._v("#")]),t._v(" "),s("strong",[t._v("利用 builder 创建【推荐使用】")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("该方法不接受任何参数，返回的是 WebClient.Builder\n")])])]),s("blockquote",[s("p",[t._v("技巧01：由于返回的不是 WebClient 类型而是 WebClient.Builder，我们可以通过返回的 WebClient.Builder 设置一些配置参数（例如：baseUrl等），然后在调用 build 就可以返回 WebClient 对象了【WebClient.Builder先关知识点请继续往下看】")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820204207193.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"重写-baseurl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写-baseurl"}},[t._v("#")]),t._v(" "),s("strong",[t._v("重写 baseURL")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果在创建 WebClient 时没有指定 baseURL 就可以用 uri 进行重写【前提：uri 的参数必须是一个完整的路径】 -> 完全重写")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820204732830.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("即使在创建WebClient的时候指定了baseURL也可以用uri进行重写【前提：uri的参数必须是一个完整的路径】-> 部分重写")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820205044169.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("即使在创建 WebClient 的时候指定了 baseURL 也可以用 uri 进行重写【前提：此时需要用到参数是一个函数式接口的 uri 方法】 ->  部分重写")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("技巧01："),s("code",[t._v("uri(Function<UriBuilder, URI> var1)")]),t._v("  -> 这个uri方法接收一个 lambda 表达式【输入是 UriBuilder，输出时 RUI 对象】")])]),t._v(" "),s("li",[s("p",[t._v("技巧02：uri 方法返回的URI对象会被转化成远程请求资源的URL")])]),t._v(" "),s("li",[s("p",[t._v("技巧03：UriBuilder 的 replacePath 方法是替换端口后面的所有信息【详情参见 UriBuilder，其实 UriBuilder 和 URI 很像】")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820205819123.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"实战技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战技巧"}},[t._v("#")]),t._v(" "),s("strong",[t._v("实战技巧")])]),t._v(" "),s("blockquote",[s("p",[t._v("在使用uri时尽量使用 "),s("code",[t._v("uri(Function<UriBuilder, URI> var1)")]),t._v(" ，因为这个方法可以设定更多的配置信息【例如：设置端口、设置参数、拼接路径、替换路径、替换参数......】")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820210621115.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"webclient-相关接口概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webclient-相关接口概览"}},[t._v("#")]),t._v(" "),s("strong",[t._v("WebClient 相关接口概览")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820194035657.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"webclient-builder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webclient-builder"}},[t._v("#")]),t._v(" "),s("code",[t._v("WebClient.Builder")])]),t._v(" "),s("blockquote",[s("p",[t._v("该接口可用来在创建 WebClient 实例时修改一些默认的配置，而且灵活性特别大；利用该接口对象可以设置 WebClient 的cookie、header 等信息。")])]),t._v(" "),s("p",[t._v("获取 WebClient.Builder 对象")]),t._v(" "),s("blockquote",[s("p",[t._v("技巧01：获取 WebClient.Builder 对象或就可以进行一些配置设置了，配置完成后调用 build 方法就可以生成 WebClient 对象啦")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Builder")]),t._v(" builder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"webclient-requestbodyspec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webclient-requestbodyspec"}},[t._v("#")]),t._v(" "),s("code",[t._v("WebClient.RequestBodySpec")])]),t._v(" "),s("blockquote",[s("p",[t._v("该接口主要用来这顶媒体类型和请求体的【需要请求体类型的 HTTP 请求需要用到，例如：POST】")]),t._v(" "),s("p",[t._v("- 技巧01：调用"),s("code",[t._v("post()")]),t._v("后返回的类型是 RequestBodyUriSpec")]),t._v(" "),s("p",[t._v("- 技巧02："),s("code",[t._v("uri()")]),t._v("方法需要 UriSpec 类型的实例才可以调用，但是 UriSpec  恰恰继承了 RequestBodyUriSpec，uri() 方法返回的类型是 RequestHeadersSpec")]),t._v(" "),s("p",[t._v("- 技巧03："),s("code",[t._v("contentType()")]),t._v(" 方法需要 RequestBodySpec 类型的实例才可以调用，但是 RequestHeadersSpec 的父接口是 RequestHeadersSpec，contentType() 的返回类型是 WebClient.RequestBodySpec")]),t._v(" "),s("p",[t._v("- 技巧04："),s("code",[t._v("body()")]),t._v(" 方法需要 RequestBodySpec 类型的实例才可以调用，body() 的返回值类型是 WebClient.RequestHeadersSpec")]),t._v(" "),s("p",[t._v("技巧总结：使用WebClient是由严格的调用你顺序的，如下：")]),t._v(" "),s("p",[t._v("HTTP请求类型 -> 请求URL -> 请求体类型 -> 请求体")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820212033929.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"webclient-请求方法概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webclient-请求方法概览"}},[t._v("#")]),t._v(" "),s("strong",[t._v("WebClient 请求方法概览")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("img",{attrs:{src:"/docs/assets/webclient/yky-20180820213727687.png",alt:""}})])])}),[],!1,null,null,null);e.default=r.exports}}]);