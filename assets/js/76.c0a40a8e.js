(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{831:function(t,a,s){"use strict";s.r(a);var r=s(67),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"传统架构与微服务架构的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传统架构与微服务架构的区别"}},[t._v("#")]),t._v(" "),s("strong",[t._v("传统架构与微服务架构的区别")])]),t._v(" "),s("h2",{attrs:{id:"系统架构需要遵循的三个标准"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统架构需要遵循的三个标准"}},[t._v("#")]),t._v(" "),s("strong",[t._v("系统架构需要遵循的三个标准")])]),t._v(" "),s("ul",[s("li",[t._v("提高敏捷性：及时响应业务需求，促进企业发展")]),t._v(" "),s("li",[t._v("提升用户体验：提升用户体验，减少用户流失")]),t._v(" "),s("li",[t._v("降低成本：降低增加产品、客户或业务方案的成本")])]),t._v(" "),s("h2",{attrs:{id:"传统的开发模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传统的开发模式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("传统的开发模式")])]),t._v(" "),s("p",[t._v("先来看看传统的 WEB 开发方式，通过对比比较容易理解什么是 "),s("strong",[t._v("微服务架构")]),t._v("。和 "),s("strong",[t._v("微服务")]),t._v(" 相对应的，这种方式一般被称为 "),s("strong",[t._v("单体式开发（Monolithic）")]),t._v("。")]),t._v(" "),s("p",[t._v("既所有的功能打包在一个 WAR 包里，基本没有外部依赖（除了容器），部署在一个 JavaEE 容器（Tomcat，JBoss，WebLogic）里，包含了 DO/DAO，Service，UI 等所有逻辑。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b69100aad0730b22d2045f75c0e252dd/xmlnote/B5DB233E7AB0440CB19BB58BF4097021/12307",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" "),s("strong",[t._v("优点")])]),t._v(" "),s("p",[t._v("开发简单，集中式管理\n基本不会重复开发\n功能都在本地，没有分布式的管理和调用消耗")]),t._v(" "),s("h2",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" "),s("strong",[t._v("缺点")])]),t._v(" "),s("p",[t._v("效率低：开发都在同一个项目改代码，相互等待，冲突不断\n维护难：代码功功能耦合在一起，新人不知道何从下手\n不灵活：构建时间长，任何小修改都要重构整个项目，耗时\n稳定性差：一个微小的问题，都可能导致整个应用挂掉\n扩展性不够：无法满足高并发下的业务需求")]),t._v(" "),s("h2",{attrs:{id:"微服务架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[t._v("#")]),t._v(" "),s("strong",[t._v("微服务架构")])]),t._v(" "),s("h3",{attrs:{id:"目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[t._v("#")]),t._v(" "),s("strong",[t._v("目的")])]),t._v(" "),s("p",[t._v("有效的拆分应用，实现敏捷开发和部署")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b69100aad0730b22d2045f75c0e252dd/xmlnote/D3C1A5F2E241407DA62848AD723B158E/12306",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"开发和交付中的伸缩立方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发和交付中的伸缩立方"}},[t._v("#")]),t._v(" 开发和交付中的伸缩立方")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b69100aad0730b22d2045f75c0e252dd/xmlnote/7EA1CA2C0F8B46FB9C14A56F39B90B43/12308",alt:""}})]),t._v(" "),s("p",[t._v("X轴： 运行多个负载均衡器之后的运行实例 Y轴： 将应用进一步分解为微服务（分库） Z轴： 大数据量时，将服务分区（分表）")])])}),[],!1,null,null,null);a.default=v.exports}}]);