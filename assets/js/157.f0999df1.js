(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{912:function(e,t,a){"use strict";a.r(t);var r=a(67),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"使用-gitlab-runner-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-gitlab-runner-docker"}},[e._v("#")]),e._v(" "),a("strong",[e._v("使用 GitLab Runner Docker")])]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" "),a("strong",[e._v("概述")])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("为了配置方便，我们使用 "),a("code",[e._v("docker")]),e._v(" 来部署 "),a("code",[e._v("GitLab Runner")])]),e._v(" "),a("h2",{attrs:{id:"环境准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[e._v("#")]),e._v(" "),a("strong",[e._v("环境准备")])]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("创建工作目录 "),a("code",[e._v("/usr/local/docker/runner")])]),e._v(" "),a("li",[e._v("创建构建目录 "),a("code",[e._v("/usr/local/docker/runner/environment")])]),e._v(" "),a("li",[e._v("下载 "),a("code",[e._v("jdk-8u152-linux-x64.tar.gz")]),e._v(" 并复制到 "),a("code",[e._v("/usr/local/docker/runner/environment")])])]),e._v(" "),a("h2",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[e._v("#")]),e._v(" "),a("strong",[e._v("Dockerfile")])]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("/usr/local/docker/runner/environment")]),e._v(" 目录下创建 "),a("code",[e._v("Dockerfile")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM gitlab/gitlab-runner:v11.0.2\nMAINTAINER Lusifer <topsale@vip.qq.com>\n\n# 修改软件源\nRUN echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse' > /etc/apt/sources.list && \\\n    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse' >> /etc/apt/sources.list && \\\n    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse' >> /etc/apt/sources.list && \\\n    echo 'deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse' >> /etc/apt/sources.list && \\\n    apt-get update -y && \\\n    apt-get clean\n\n# 安装 Docker\nRUN apt-get -y install apt-transport-https ca-certificates curl software-properties-common && \\\n    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add - && \\\n    add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" && \\\n    apt-get update -y && \\\n    apt-get install -y docker-ce\nCOPY daemon.json /etc/docker/daemon.json\n\n# 安装 Docker Compose\nWORKDIR /usr/local/bin\nRUN wget https://raw.githubusercontent.com/topsale/resources/master/docker/docker-compose\nRUN chmod +x docker-compose\n\n# 安装 Java\nRUN mkdir -p /usr/local/java\nWORKDIR /usr/local/java\nCOPY jdk-8u152-linux-x64.tar.gz /usr/local/java\nRUN tar -zxvf jdk-8u152-linux-x64.tar.gz && \\\n    rm -fr jdk-8u152-linux-x64.tar.gz\n\n# 安装 Maven\nRUN mkdir -p /usr/local/maven\nWORKDIR /usr/local/maven\nRUN wget https://raw.githubusercontent.com/topsale/resources/master/maven/apache-maven-3.5.3-bin.tar.gz\n# COPY apache-maven-3.5.3-bin.tar.gz /usr/local/maven\nRUN tar -zxvf apache-maven-3.5.3-bin.tar.gz && \\\n    rm -fr apache-maven-3.5.3-bin.tar.gz\n# COPY settings.xml /usr/local/maven/apache-maven-3.5.3/conf/settings.xml\n\n# 配置环境变量\nENV JAVA_HOME /usr/local/java/jdk1.8.0_152\nENV MAVEN_HOME /usr/local/maven/apache-maven-3.5.3\nENV PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin\n\nWORKDIR /\n")])])]),a("h2",{attrs:{id:"daemon-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daemon-json"}},[e._v("#")]),e._v(" "),a("strong",[e._v("daemon.json")])]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("/usr/local/docker/runner/environment")]),e._v(" 目录下创建 "),a("code",[e._v("daemon.json")]),e._v("，用于配置加速器和仓库地址")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "registry-mirrors": [\n    "https://registry.docker-cn.com"\n  ],\n  "insecure-registries": [\n    "192.168.75.131:5000"\n  ]\n}\n')])])]),a("h2",{attrs:{id:"docker-compose-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[e._v("#")]),e._v(" "),a("strong",[e._v("docker-compose.yml")])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("/usr/local/docker/runner")]),e._v(" 目录下创建 "),a("code",[e._v("docker-compose.yml")])]),e._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'3.1'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("gitlab-runner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" environment\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" always\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" gitlab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("runner\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("privileged")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /usr/local/docker/runner/config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/gitlab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("runner\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/docker.sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/run/docker.sock\n")])])]),a("h2",{attrs:{id:"注册-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册-runner"}},[e._v("#")]),e._v(" "),a("strong",[e._v("注册 Runner")])]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker exec -it gitlab-runner gitlab-runner register\n\n# 输入 GitLab 地址\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://192.168.75.146:8080/\n\n# 输入 GitLab Token\nPlease enter the gitlab-ci token for this runner:\n1Lxq_f1NRfCfeNbE5WRh\n\n# 输入 Runner 的说明\nPlease enter the gitlab-ci description for this runner:\n可以为空\n\n# 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci\nPlease enter the gitlab-ci tags for this runner (comma separated):\ndeploy\n\n# 这里选择 true ，可以用于代码上传后直接执行\nWhether to run untagged builds [true/false]:\ntrue\n\n# 这里选择 false，可以直接回车，默认为 false\nWhether to lock Runner to current project [true/false]:\nfalse\n\n# 选择 runner 执行器，这里我们选择的是 shell\nPlease enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:\nshell\n")])])]),a("h2",{attrs:{id:"附：项目配置-dockerfile-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附：项目配置-dockerfile-案例"}},[e._v("#")]),e._v(" "),a("strong",[e._v("附：项目配置 Dockerfile 案例")])]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM openjdk:8-jre\n\nMAINTAINER Lusifer <topsale@vip.qq.com>\n\nENV APP_VERSION 1.0.0-SNAPSHOT\nENV DOCKERIZE_VERSION v0.6.1\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\nRUN mkdir /app\n\nCOPY itoken-eureka-$APP_VERSION.jar /app/app.jar\nENTRYPOINT ["dockerize", "-timeout", "5m", "-wait", "tcp://192.168.75.128:8888", "java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app/app.jar", "--spring.profiles.active=prod"]\n\nEXPOSE 8761\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);