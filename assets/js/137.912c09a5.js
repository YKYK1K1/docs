(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{892:function(e,t,n){"use strict";n.r(t);var r=n(67),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"使用-gitlab-runner"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-gitlab-runner"}},[e._v("#")]),e._v(" "),n("strong",[e._v("使用 GitLab Runner")])]),e._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" "),n("strong",[e._v("简介")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("理解了上面的基本概念之后，有没有觉得少了些什么东西 —— 由谁来执行这些构建任务呢？ 答案就是 GitLab Runner 了！")]),e._v(" "),n("p",[e._v("想问为什么不是 GitLab CI 来运行那些构建任务？")]),e._v(" "),n("p",[e._v("一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。")]),e._v(" "),n("p",[e._v("GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做拉！")]),e._v(" "),n("p",[e._v("因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能")]),e._v(" "),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" "),n("strong",[e._v("安装")])]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("在目标主机上安装 GitLab Runner，这里的目标主机指你要部署的服务器")]),e._v(" "),n("li",[e._v("Ubuntu 安装脚本：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\nsudo apt-get update\nsudo apt-get install gitlab-ci-multi-runner\n")])])]),n("h2",{attrs:{id:"注册-runner"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册-runner"}},[e._v("#")]),e._v(" "),n("strong",[e._v("注册 Runner")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("安装好 GitLab Runner 之后，我们只要启动 Runner 然后和 GitLab CI 绑定：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@iZbp1fmnx8oyubksjdk7leZ gitbook]# gitlab-ci-multi-runner register\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://192.168.75.146:8080/\nPlease enter the gitlab-ci token for this runner:\n1Lxq_f1NRfCfeNbE5WRh\nPlease enter the gitlab-ci description for this runner:\n[iZbp1fmnx8oyubksjdk7leZ]: deploy-gaming\nPlease enter the gitlab-ci tags for this runner (comma separated):\ndeploy\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]: \nRegistering runner... succeeded                     runner=P_zfkhTb\nPlease enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n")])])]),n("p",[e._v("说明：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("gitlab-ci-multi-runner register")]),e._v("：执行注册命令")]),e._v(" "),n("li",[n("code",[e._v("Please enter the gitlab-ci coordinator URL")]),e._v("：输入 ci 地址")]),e._v(" "),n("li",[n("code",[e._v("Please enter the gitlab-ci token for this runner")]),e._v("：输入 ci token")]),e._v(" "),n("li",[n("code",[e._v("Please enter the gitlab-ci description for this runner")]),e._v("：输入 runner 名称")]),e._v(" "),n("li",[n("code",[e._v("Please enter the gitlab-ci tags for this runner")]),e._v("：设置 tag")]),e._v(" "),n("li",[n("code",[e._v("Whether to run untagged builds")]),e._v("：这里选择 true ，代码上传后会能够直接执行")]),e._v(" "),n("li",[n("code",[e._v("Whether to lock Runner to current project")]),e._v("：直接回车，不用输入任何口令")]),e._v(" "),n("li",[n("code",[e._v("Please enter the executor")]),e._v("：选择 runner 类型，这里我们选择的是 shell")])]),e._v(" "),n("p",[e._v("CI 的地址和令牌，在 项目 --\x3e 设置 --\x3e CI/CD --\x3e Runner 设置：")]),e._v(" "),n("p",[e._v(".gitlab-ci.yml\n在项目工程下编写 .gitlab-ci.yml 配置文件：\nstages:")]),e._v(" "),n("ul",[n("li",[e._v("install_deps")]),e._v(" "),n("li",[e._v("test")]),e._v(" "),n("li",[e._v("build")]),e._v(" "),n("li",[e._v("deploy_test")]),e._v(" "),n("li",[e._v("deploy_production")])]),e._v(" "),n("p",[e._v("cache:\nkey: ${CI_BUILD_REF_NAME}\npaths:\n- node_modules/\n- dist/")]),e._v(" "),n("h1",{attrs:{id:"安装依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[e._v("#")]),e._v(" 安装依赖")]),e._v(" "),n("p",[e._v("install_deps:\nstage: install_deps\nonly:\n- develop\n- master\nscript:\n- npm install")]),e._v(" "),n("h1",{attrs:{id:"运行测试用例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行测试用例"}},[e._v("#")]),e._v(" 运行测试用例")]),e._v(" "),n("p",[e._v("test:\nstage: test\nonly:\n- develop\n- master\nscript:\n- npm run test")]),e._v(" "),n("h1",{attrs:{id:"编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[e._v("#")]),e._v(" 编译")]),e._v(" "),n("p",[e._v("build:\nstage: build\nonly:\n- develop\n- master\nscript:\n- npm run clean\n- npm run build:client\n- npm run build:server")]),e._v(" "),n("h1",{attrs:{id:"部署测试服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#部署测试服务器"}},[e._v("#")]),e._v(" 部署测试服务器")]),e._v(" "),n("p",[e._v("deploy_test:\nstage: deploy_test\nonly:\n- develop\nscript:\n- pm2 delete app || true\n- pm2 start app.js --name app")]),e._v(" "),n("h1",{attrs:{id:"部署生产服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#部署生产服务器"}},[e._v("#")]),e._v(" 部署生产服务器")]),e._v(" "),n("p",[e._v("deploy_production:\nstage: deploy_production\nonly:\n- master\nscript:\n- bash scripts/deploy/deploy.sh")]),e._v(" "),n("p",[e._v("上面的配置把一次 Pipeline 分成五个阶段：\n安装依赖(install_deps)\n运行测试(test)\n编译(build)\n部署测试服务器(deploy_test)\n部署生产服务器(deploy_production)\n设置 Job.only 后，只有当 develop 分支和 master 分支有提交的时候才会触发相关的 Jobs。\n节点说明：\nstages：定义构建阶段，这里只有一个阶段 deploy\ndeploy：构建阶段 deploy 的详细配置也就是任务配置\nscript：需要执行的 shell 脚本\nonly：这里的 master 指在提交到 master 时执行\ntags：与注册 runner 时的 tag 匹配")]),e._v(" "),n("p",[e._v("其它配置\n为保证能够正常集成，我们还需要一些其它配置：\n安装完 GitLab Runner 后系统会增加一个 gitlab-runner 账户，我们将它加进 root 组：\ngpasswd -a gitlab-runner root")]),e._v(" "),n("p",[e._v("配置需要操作目录的权限，比如你的 runner 要在 gaming 目录下操作：\nchmod 775 gaming")]),e._v(" "),n("p",[e._v('由于我们的 shell 脚本中有执行 git pull 的命令，我们直接设置以 ssh 方式拉取代码：\nsu gitlab-runner\nssh-keygen -t rsa -C "你在 GitLab 上的邮箱地址"\ncd\ncd .ssh\ncat id_rsa.pub')]),e._v(" "),n("p",[e._v("复制 id_rsa.pub 中的秘钥到 GitLab：")]),e._v(" "),n("p",[e._v("通过 ssh 的方式将代码拉取到本地")]),e._v(" "),n("p",[e._v("测试集成效果\n所有操作完成后 push 代码到服务器，查看是否成功：")]),e._v(" "),n("p",[e._v("passed 表示执行成功")]),e._v(" "),n("p",[e._v('其他命令\n删除注册信息：\ngitlab-ci-multi-runner unregister --name "名称"')]),e._v(" "),n("p",[e._v("查看注册列表：\ngitlab-ci-multi-runner list")]),e._v(" "),n("p",[e._v("附：我的操作\n上传查看 GitLab 是否真的做到持续集成 运行了我的命令")]),e._v(" "),n("p",[e._v("运行中 等待 点击查看")]),e._v(" "),n("p",[e._v("已通过 点击查看")])])}),[],!1,null,null,null);t.default=a.exports}}]);