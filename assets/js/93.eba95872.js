(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{849:function(a,n,t){"use strict";t.r(n);var e=t(67),r=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"清理垃圾maven依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清理垃圾maven依赖"}},[a._v("#")]),a._v(" "),t("strong",[a._v("清理垃圾maven依赖")])]),a._v(" "),t("p",[t("code",[a._v(".lastupdated")])]),a._v(" "),t("h2",{attrs:{id:"编译打包安装到本地仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译打包安装到本地仓库"}},[a._v("#")]),a._v(" "),t("strong",[a._v("编译打包安装到本地仓库")])]),a._v(" "),t("p",[a._v("1.mvn install -Dmaven.test.skip=true")]),a._v(" "),t("h2",{attrs:{id:"打包的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打包的过程"}},[a._v("#")]),a._v(" "),t("strong",[a._v("打包的过程")])]),a._v(" "),t("ol",[t("li",[a._v("清理 clean\n将所有需要的依赖都存在（让第三方依赖到本地仓库） AOP")]),a._v(" "),t("li",[a._v("编译\n寻找所需的全部依赖，依赖都存在才可以打包，才可执行")]),a._v(" "),t("li",[a._v("打包")])]),a._v(" "),t("p",[a._v("mvn clean 将第三方依赖安装进本地仓库")]),a._v(" "),t("h2",{attrs:{id:"现象说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现象说明"}},[a._v("#")]),a._v(" "),t("strong",[a._v("现象说明")])]),a._v(" "),t("p",[a._v("无法下载依赖的情况大致有两类：")]),a._v(" "),t("ul",[t("li",[a._v("无法通过 Maven 中央仓库提供的坐标下载（也许是网络环境导致）")]),a._v(" "),t("li",[a._v("类库没有上传至中央仓库只能通过官网或其它渠道下载")])]),a._v(" "),t("h2",{attrs:{id:"解决思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决思路"}},[a._v("#")]),a._v(" "),t("strong",[a._v("解决思路")])]),a._v(" "),t("ul",[t("li",[a._v("手动管理依赖，将依赖按传统的方式放入 libs 目录中。缺点是需要手动管理依赖版本。")]),a._v(" "),t("li",[a._v("将依赖安装到本地仓库中，按照 Maven 下载依赖的优先级，会优先查找本地仓库中的依赖。缺点是协同开发时，其他开发人员会因为本地缺少依赖导致项目启动报错。")])]),a._v(" "),t("h2",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" "),t("strong",[a._v("解决方案")])]),a._v(" "),t("p",[a._v("以上解决思路虽然都可以解决缺少依赖的问题，但操作起来不太优雅，此时我们可以使用 Maven 提供的插件来解决这个问题\n"),t("code",[a._v("pom.xml")]),a._v(" 增加插件配置，关键配置如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-install-plugin</artifactId>\n            <version>2.5.2</version>\n            <executions>\n                <execution>\n                    <id>install-external-kaptcha</id>\n                    \x3c!-- 触发时机：执行 mvn clean 命令时自动触发插件 --\x3e\n                    <phase>clean</phase>\n                    <configuration>\n                        \x3c!-- 存放依赖文件的位置 --\x3e\n                        <file>${project.basedir}/libs/kaptcha-2.3.jar</file>\n                        <repositoryLayout>default</repositoryLayout>\n                        \x3c!-- 自定义 groupId --\x3e\n                        <groupId>com.google.code.kaptcha</groupId>\n                        \x3c!-- 自定义 artifactId --\x3e\n                        <artifactId>kaptcha</artifactId>\n                        \x3c!-- 自定义版本号 --\x3e\n                        <version>2.3</version>\n                        \x3c!-- 打包方式 --\x3e\n                        <packaging>jar</packaging>\n                        \x3c!-- 是否自动生成 POM --\x3e\n                        <generatePom>true</generatePom>\n                    </configuration>\n                    <goals>\n                        <goal>install-file</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n")])])]),t("p",[a._v("通过该插件，我们可以在执行 "),t("code",[a._v("mvn clean")]),a._v(" 命令时将项目所需要的依赖自动安装进本地仓库")])])}),[],!1,null,null,null);n.default=r.exports}}]);